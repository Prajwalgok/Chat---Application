{"version":3,"sources":["components/LoginForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/MessageForm.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MyMessage","message","attachments","length","src","file","alt","style","float","marginRight","color","backgroundColor","text","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","MessageForm","props","setValue","chatId","creds","event","trim","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","display","files","SendOutlined","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9af10172.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LoginForm = () => {\r\n    const [username , setUsername] = useState('');\r\n    const [password , setPassword] = useState('');\r\n    const [error    , setError] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const authObject = {'Project-ID': \"8bccc260-25ad-459f-af91-c8a8e4c9c2ae\" , 'User-Name': username , 'User-Secret' : password }\r\n\r\n        try {\r\n            await axios.get('https://api.chatengine.io/chats' , {headers : authObject });\r\n            localStorage.setItem('username',username);\r\n            localStorage.setItem('password',password);\r\n    \r\n            window.location.reload();\r\n        }\r\n        catch(error)\r\n        {\r\n           setError('oops ! incorrect credentials. ')\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n              <div className=\"form\">\r\n                  <h1 className=\"title\">Chat Application</h1>\r\n                  <form onSubmit={handleSubmit}>\r\n                      <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required/>\r\n                      <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required/>\r\n                      <div align=\"center\">\r\n                            <button type=\"submit\" className=\"button\">\r\n                                <span> Start Chatting </span>\r\n                            </button>\r\n                      </div>\r\n                      <h2 className=\"error\">{error}</h2>\r\n                  </form>\r\n              </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;\r\n","const MyMessage = ({message}) => {\r\n    if(message?.attachments?.length > 0)\r\n    {\r\n        return(\r\n            <img\r\n                 src={message.attachments[0].file}\r\n                 alt=\"message-attachment\"\r\n                 className=\"message-image\"\r\n                 style={{float: 'right'}}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n          <div className=\"message\" style={{ float :'right' , marginRight : '18px' , color : 'white' , backgroundColor : '#3B2A50'}}>\r\n               {message.text}\r\n          </div>\r\n    );\r\n}\r\n\r\nexport default MyMessage;\r\n","const TheirMessage = ({lastMessage , message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    return (\r\n          <div className=\"message-row\">\r\n               {isFirstMessageByUser && (\r\n                   <div\r\n                       className=\"message-avatar\"\r\n                       style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n                   />\r\n               )}\r\n               {message?.attachments?.length > 0\r\n                     ?  (\r\n                            <img\r\n                                src={message.attachments[0].file}\r\n                                alt=\"message-attachment\"\r\n                                className=\"message-image\"\r\n                                style={{marginLeft : isFirstMessageByUser ? '4px' : '48px'}}\r\n                            />\r\n                        ) :\r\n                        (\r\n                            <div className=\"message\" style={{ float :'left'  , marginLeft : isFirstMessageByUser ? '4px' : '48px' , backgroundColor : '#CABCDC'}}>\r\n                                     {message.text}\r\n                             </div>\r\n                        )\r\n               }\r\n          </div>\r\n    );\r\n}\r\n\r\nexport default  TheirMessage;","import { useState } from 'react';\r\nimport { sendMessage,isTyping } from 'react-chat-engine';\r\nimport { SendOutlined,PictureOutlined } from '@ant-design/icons';\r\n\r\nconst MessageForm = (props) => {\r\n      const [value , setValue] = useState('');\r\n      const {chatId , creds} = props;\r\n\r\n      const handleSubmit = (event) => {\r\n           event.preventDefault();\r\n           const text = value.trim();\r\n           if(text.length > 0) {sendMessage(creds, chatId, { text });}\r\n\r\n           setValue('');\r\n      };\r\n      const handleChange = (event) => {\r\n           setValue(event.target.value);\r\n           isTyping (props ,chatId);\r\n      };\r\n      const handleUpload = (event) => {\r\n            sendMessage(creds, chatId ,{files : event.target.files , text  : ''})\r\n      }\r\n      return (\r\n            <form className=\"message-form\" onSubmit={handleSubmit}>\r\n                  <input \r\n                        className = \"message-input\"\r\n                        placeholder = \"Send a message ...\"\r\n                        value = {value}\r\n                        onChange = {handleChange}\r\n                        onSubmit = {handleSubmit}\r\n                  />\r\n                   <label htmlFor=\"upload-button\">\r\n                         <span className=\"image-button\">\r\n                             <PictureOutlined  className=\"picture-icon\"/>\r\n                         </span>\r\n                  </label>\r\n                  <input \r\n                      type=\"file\"\r\n                      multiple={false}\r\n                      id=\"upload-button\"\r\n                      style={{display : 'none'}}\r\n                      onChange={handleUpload}\r\n                  />\r\n                  <button type=\"submit\"  className=\"send-button\">\r\n                        <SendOutlined className=\"send-icon\" />\r\n                  </button>\r\n            </form>\r\n      );\r\n\r\n}\r\n\r\nexport default MessageForm;\r\n\r\n/*\r\nimport { useState } from 'react';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\n\r\nconst MessageForm = (props) => {\r\n  const [value, setValue] = useState('');\r\n  const { chatId, creds } = props;\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n\r\n    isTyping(props, chatId);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const text = value.trim();\r\n\r\n    if (text.length > 0) {\r\n      sendMessage(creds, chatId, { text });\r\n    }\r\n\r\n    setValue('');\r\n  };\r\n\r\n  const handleUpload = (event) => {\r\n    sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n  };\r\n\r\n  return (\r\n    <form className=\"message-form\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"message-input\"\r\n        placeholder=\"Send a message...\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        onSubmit={handleSubmit}\r\n      />\r\n      <label htmlFor=\"upload-button\">\r\n        <span className=\"image-button\">\r\n          <PictureOutlined className=\"picture-icon\" />\r\n        </span>\r\n      </label>\r\n      <input\r\n        type=\"file\"\r\n        multiple={false}\r\n        id=\"upload-button\"\r\n        style={{ display: 'none' }}\r\n        onChange={handleUpload.bind(this)}\r\n      />\r\n      <button type=\"submit\" className=\"send-button\">\r\n        <SendOutlined className=\"send-icon\" />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageForm;\r\n*/","import MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\nimport MessageForm from './MessageForm';\r\n\r\nconst ChatFeed = (props) => {\r\n  const { chats, activeChat, userName, messages } = props;\r\n\r\n  const chat = chats && chats[activeChat];\r\n\r\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\r\n    <div\r\n      key={`read_${index}`}\r\n      className=\"read-receipt\"\r\n      style={{\r\n        float: isMyMessage ? 'right' : 'left',\r\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\r\n      }}\r\n    />\r\n  ));\r\n\r\n  const renderMessages = () => {\r\n    const keys = Object.keys(messages);\r\n\r\n    return keys.map((key, index) => {\r\n      const message = messages[key];\r\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n      const isMyMessage = userName === message.sender.username;\r\n\r\n      return (\r\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n          <div className=\"message-block\">\r\n            {isMyMessage\r\n              ? <MyMessage message={message} />\r\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\r\n          </div>\r\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\r\n            {renderReadReceipts(message, isMyMessage)}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  if (!chat) return <div />;\r\n\r\n  return (\r\n    <div className=\"chat-feed\">\r\n      <div className=\"chat-title-container\">\r\n        <div className=\"chat-title\">{chat?.title}</div>\r\n        <div className=\"chat-subtitle\">\r\n          {chat.people.map((person) => ` ${person.person.username}`)}\r\n        </div>\r\n      </div>\r\n      {renderMessages()}\r\n      <div style={{ height: '100px' }} />\r\n      <div className=\"message-form-container\">\r\n        <MessageForm {...props} chatId={activeChat} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine';\r\nimport './App.css';\r\nimport LoginForm from './components/LoginForm';\r\nimport ChatFeed from './components/ChatFeed';\r\n\r\nconst App = () => {\r\n    if(!localStorage.getItem('username')) return <LoginForm />;\r\n    return(\r\n        <ChatEngine\r\n            height=\"100vh\"\r\n            projectID=\"8bccc260-25ad-459f-af91-c8a8e4c9c2ae\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed = {(chatAppProps) => <ChatFeed  {...chatAppProps} />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}